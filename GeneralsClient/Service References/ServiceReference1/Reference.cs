//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneralsClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGeneral")]
    public interface IGeneral {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/ReName", ReplyAction="http://tempuri.org/IGeneral/ReNameResponse")]
        void ReName(string Oldname, string NewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/ReName", ReplyAction="http://tempuri.org/IGeneral/ReNameResponse")]
        System.Threading.Tasks.Task ReNameAsync(string Oldname, string NewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/FinishRound", ReplyAction="http://tempuri.org/IGeneral/FinishRoundResponse")]
        void FinishRound(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/FinishRound", ReplyAction="http://tempuri.org/IGeneral/FinishRoundResponse")]
        System.Threading.Tasks.Task FinishRoundAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/IsFinish", ReplyAction="http://tempuri.org/IGeneral/IsFinishResponse")]
        bool IsFinish();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/IsFinish", ReplyAction="http://tempuri.org/IGeneral/IsFinishResponse")]
        System.Threading.Tasks.Task<bool> IsFinishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/GetCount", ReplyAction="http://tempuri.org/IGeneral/GetCountResponse")]
        int GetCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/GetCount", ReplyAction="http://tempuri.org/IGeneral/GetCountResponse")]
        System.Threading.Tasks.Task<int> GetCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/AddUser", ReplyAction="http://tempuri.org/IGeneral/AddUserResponse")]
        void AddUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeneral/AddUser", ReplyAction="http://tempuri.org/IGeneral/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeneralChannel : GeneralsClient.ServiceReference1.IGeneral, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeneralClient : System.ServiceModel.ClientBase<GeneralsClient.ServiceReference1.IGeneral>, GeneralsClient.ServiceReference1.IGeneral {
        
        public GeneralClient() {
        }
        
        public GeneralClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeneralClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneralClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneralClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ReName(string Oldname, string NewName) {
            base.Channel.ReName(Oldname, NewName);
        }
        
        public System.Threading.Tasks.Task ReNameAsync(string Oldname, string NewName) {
            return base.Channel.ReNameAsync(Oldname, NewName);
        }
        
        public void FinishRound(string name) {
            base.Channel.FinishRound(name);
        }
        
        public System.Threading.Tasks.Task FinishRoundAsync(string name) {
            return base.Channel.FinishRoundAsync(name);
        }
        
        public bool IsFinish() {
            return base.Channel.IsFinish();
        }
        
        public System.Threading.Tasks.Task<bool> IsFinishAsync() {
            return base.Channel.IsFinishAsync();
        }
        
        public int GetCount() {
            return base.Channel.GetCount();
        }
        
        public System.Threading.Tasks.Task<int> GetCountAsync() {
            return base.Channel.GetCountAsync();
        }
        
        public void AddUser(string name) {
            base.Channel.AddUser(name);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string name) {
            return base.Channel.AddUserAsync(name);
        }
    }
}
